image: registry.gitlab.bsc.es/hwdesign/containerhub/verilator_riscv:latest

workflow:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event") # Merge requests 
      variables: 
        PIPELINE_BRANCH: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME 
    - if: ($CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS) # Fix detached merge request pipelines
      when: never 
    - if: ($CI_COMMIT_BRANCH) # All branches
      variables: 
        PIPELINE_BRANCH: $CI_COMMIT_BRANCH

variables:
  GIT_STRATEGY: clone
  GIT_SOURCES_ATTEMPTS: 4
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_CLEAN_FLAGS: -ffdx
  GIT_DEPTH: 1
  GIT_SUBMODULE_DEPTH: 1
  RISCV_GCC: /opt/riscv-gnu-toolchain/rvv-1.0.0/bin/riscv64-unknown-elf-gcc 
  RISCV_OBJDUMP: /opt/riscv-gnu-toolchain/rvv-1.0.0/bin/riscv64-unknown-elf-objcopy 

before_script:
  #- git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es:".insteadOf "https://gitlab.bsc.es/"
  #- git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es:".insteadOf "git@gitlab-internal.bsc.es/"

  # Clone repos
  #- rm -rf rtl/datapath/rtl/exe_stage/rtl/mixgemm_uengine
  #- git clone git@gitlab-internal.bsc.es:drac/mixgemm_uengine.git rtl/datapath/rtl/exe_stage/rtl/mixgemm_uengine -b main
  #- rm -rf rtl/mmu
  #- git clone --recurse-submodules git@gitlab-internal.bsc.es:drac/mmu.git rtl/mmu -b sargantana
  #- rm -rf drac-bench
  #- git clone --recurse-submodules git@gitlab-internal.bsc.es:drac/drac-bench.git drac-bench -b sargantana

stages:
  - linting
  - building
  - simulation

verilator:verilog:
  stage: linting
  tags:
    - verilator
  rules:
    - when: always
  script:
    - verilator --version
    - make lint
  allow_failure: true

spyglass:verilog:
  image: registry.gitlab.bsc.es/hwdesign/containerhub/spyglass:latest
  stage: linting
  tags:
    - spyglass
  rules:
    - when: always
  script:
    - make local_spyglass
  allow_failure: true
  artifacts:
    paths:
    - top_drac/consolidated_reports/top_drac_lint_lint_rtl/
    expire_in: 1 week

build-isa-tests:
  stage: building
  rules:
    - when: always
  script:
    - $RISCV_GCC --version
    - make build-isa-tests
  artifacts:
    paths:
    - tb/tb_isa_tests/build
    expire_in: 1 week

build-benchmarks:
  stage: building
  rules:
    - when: always
  script:
    - $RISCV_GCC --version
    - make build-benchmarks
  artifacts:
    paths:
    - benchmarks
    expire_in: 1 week

build-simulator:
  stage: building
  rules:
    - when: always
  script:
    - verilator --version
    - gcc --version
    - make sim
  artifacts:
    paths:
    - simulator/riscv-isa-sim/build/spike
    - sim
    - bootrom.hex
    expire_in: 1 week

build-torture:
  stage: building
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule")
      when: always
  script:
    - $RISCV_GCC --version
    - make build-torture
  artifacts:
    paths:
    - tb/tb_torture/riscv-torture/output

isa-tests:
  stage: simulation
  rules:
    - when: always
  dependencies:
    - build-simulator
    - build-isa-tests
  script:
    - ./tb/tb_isa_tests/run-tests.py ./sim tb/tb_isa_tests/build/isa

benchmarks:
  stage: simulation
  rules:
    - when: always
  dependencies:
    - build-simulator
    - build-benchmarks
  script:
    - ./run-benchmarks.sh

torture:
  stage: simulation
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule")
      when: always
  dependencies:
    - build-torture
  script:
    - $RISCV_GCC --version
    - make run-torture

#questa:verilog:
#  image: localhost:5000/epi_rtl-vsim
#  stage: simulation
#  tags:
#    - questasim
#  script:
#    - make questa
#  allow_failure: true
#  artifacts:
#    paths:
#    - artifact_questa.log
#    expire_in: 1 week
